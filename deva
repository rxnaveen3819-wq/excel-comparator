import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime

# -----------------------------
# Database setup
# -----------------------------
conn = sqlite3.connect("mobile_shop.db", check_same_thread=False)
c = conn.cursor()

# Create tables if not exist
c.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    price REAL
)
""")

c.execute("""
CREATE TABLE IF NOT EXISTS stock (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER,
    qty INTEGER,
    type TEXT, -- 'INWARD' or 'OUTWARD'
    date TEXT,
    FOREIGN KEY(product_id) REFERENCES products(id)
)
""")
conn.commit()

# -----------------------------
# Functions
# -----------------------------
def add_product(name, price):
    try:
        c.execute("INSERT INTO products (name, price) VALUES (?, ?)", (name, price))
        conn.commit()
        st.success(f"‚úÖ Product '{name}' added.")
    except:
        st.warning("‚ö†Ô∏è Product already exists!")

def record_stock(product_name, qty, type_):
    c.execute("SELECT id FROM products WHERE name=?", (product_name,))
    product = c.fetchone()
    if product:
        c.execute("INSERT INTO stock (product_id, qty, type, date) VALUES (?, ?, ?, ?)",
                  (product[0], qty, type_, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
        st.success(f"‚úÖ {type_} recorded for {product_name}, Qty: {qty}")
    else:
        st.error("‚ùå Product not found!")

def get_stock_report():
    query = """
    SELECT p.name, 
           p.price,
           IFNULL(SUM(CASE WHEN s.type='INWARD' THEN s.qty ELSE 0 END),0) AS inward,
           IFNULL(SUM(CASE WHEN s.type='OUTWARD' THEN s.qty ELSE 0 END),0) AS outward,
           IFNULL(SUM(CASE WHEN s.type='INWARD' THEN s.qty ELSE 0 END),0) -
           IFNULL(SUM(CASE WHEN s.type='OUTWARD' THEN s.qty ELSE 0 END),0) AS balance
    FROM products p
    LEFT JOIN stock s ON p.id = s.product_id
    GROUP BY p.id, p.name, p.price
    """
    return pd.read_sql(query, conn)

# -----------------------------
# Streamlit UI
# -----------------------------
st.title("üì± Mobile Shop Management")

menu = ["Add Product", "Inward", "Outward", "Stock Report"]
choice = st.sidebar.radio("üìå Menu", menu)

if choice == "Add Product":
    st.subheader("‚ûï Add New Product")
    name = st.text_input("Product Name")
    price = st.number_input("Price", min_value=0.0, step=0.1)
    if st.button("Add Product"):
        add_product(name, price)

elif choice == "Inward":
    st.subheader("üì¶ Inward Entry")
    products = pd.read_sql("SELECT name FROM products", conn)["name"].tolist()
    if products:
        product = st.selectbox("Select Product", products)
        qty = st.number_input("Quantity", min_value=1)
        if st.button("Record Inward"):
            record_stock(product, qty, "INWARD")
    else:
        st.warning("‚ö†Ô∏è No products available. Add products first!")

elif choice == "Outward":
    st.subheader("üì§ Outward (Sales) Entry")
    products = pd.read_sql("SELECT name FROM products", conn)["name"].tolist()
    if products:
        product = st.selectbox("Select Product", products)
        qty = st.number_input("Quantity", min_value=1)
        if st.button("Record Outward"):
            record_stock(product, qty, "OUTWARD")
    else:
        st.warning("‚ö†Ô∏è No products available. Add products first!")

elif choice == "Stock Report":
    st.subheader("üìä Stock Report")
    df = get_stock_report()
    st.dataframe(df)

    # Today's Sales Report
    today = datetime.now().strftime("%Y-%m-%d")
    query_today = f"""
    SELECT p.name, SUM(s.qty) as sold_qty, p.price, SUM(s.qty)*p.price as total_sales
    FROM stock s
    JOIN products p ON s.product_id=p.id
    WHERE s.type='OUTWARD' AND date LIKE '{today}%'
    GROUP BY p.name, p.price
    """
    today_sales = pd.read_sql(query_today, conn)
    st.write("üõí **Today's Sales**")
    st.dataframe(today_sales)
    st.write("üí∞ Total Sales: ", today_sales["total_sales"].sum() if not today_sales.empty else 0)
