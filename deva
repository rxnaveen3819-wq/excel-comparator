import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime

# -----------------------------
# Database setup
# -----------------------------
conn = sqlite3.connect("mobile_shop.db", check_same_thread=False)
cursor = conn.cursor()

# Create tables if not exist
cursor.execute("""
CREATE TABLE IF NOT EXISTS stock (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model TEXT,
    quantity INTEGER,
    price REAL,
    date TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS sales (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    model TEXT,
    quantity INTEGER,
    price REAL,
    date TEXT
)
""")
conn.commit()

# -----------------------------
# Functions
# -----------------------------
def add_stock(model, qty, price):
    date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO stock (model, quantity, price, date) VALUES (?, ?, ?, ?)",
                   (model, qty, price, date))
    conn.commit()

def sell_mobile(model, qty, price):
    date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO sales (model, quantity, price, date) VALUES (?, ?, ?, ?)",
                   (model, qty, price, date))
    conn.commit()

def get_stock_balance():
    stock_df = pd.read_sql("SELECT model, SUM(quantity) as total_inward FROM stock GROUP BY model", conn)
    sales_df = pd.read_sql("SELECT model, SUM(quantity) as total_sold FROM sales GROUP BY model", conn)
    merged = pd.merge(stock_df, sales_df, on="model", how="left").fillna(0)
    merged["balance"] = merged["total_inward"] - merged["total_sold"]
    return merged

def get_today_sales():
    today = datetime.now().strftime("%Y-%m-%d")
    query = "SELECT * FROM sales WHERE date = ?"
    return pd.read_sql(query, conn, params=(today,))

# -----------------------------
# Streamlit UI
# -----------------------------
st.title("ðŸ“± Mobile Shop Management")

menu = st.sidebar.radio("Menu", ["Inward Stock", "Sell Mobile", "Balance Stock", "Today Sales Report"])

if menu == "Inward Stock":
    st.subheader("âž• Add New Stock")
    model = st.text_input("Mobile Model")
    qty = st.number_input("Quantity", min_value=1, step=1)
    price = st.number_input("Price", min_value=1000, step=100)
    if st.button("Add Stock"):
        add_stock(model, qty, price)
        st.success(f"{qty} units of {model} added to stock.")

elif menu == "Sell Mobile":
    st.subheader("ðŸ’¸ Sell Mobile")
    model = st.text_input("Mobile Model")
    qty = st.number_input("Quantity", min_value=1, step=1)
    price = st.number_input("Selling Price", min_value=1000, step=100)
    if st.button("Sell"):
        sell_mobile(model, qty, price)
        st.success(f"Sold {qty} units of {model}.")

elif menu == "Balance Stock":
    st.subheader("ðŸ“Š Balance Stock")
    balance_df = get_stock_balance()
    st.dataframe(balance_df)

elif menu == "Today Sales Report":
    st.subheader("ðŸ“… Today Sales")
    sales_df = get_today_sales()
    st.dataframe(sales_df)
